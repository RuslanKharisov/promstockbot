# handlers/api_request.py
# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "ü§ù –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?" –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é.
#
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from states.api_request import ApiRequestState
from utils.validators import extract_phone, extract_email
from utils.sheets import append_to_sheet

router = Router()


@router.message(F.text == "ü§ù –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?")
async def request_handler(message: Message, state: FSMContext):
    await state.set_state(ApiRequestState.waiting_for_contact)
    await message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –∏ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é API.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "+79161234567 –•–æ—á—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–∫–ª–∞–¥ –∫ API"
    )


@router.message(ApiRequestState.waiting_for_contact)
async def handle_api_request(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    text = message.text.strip()

    phone = extract_phone(text)
    email = extract_email(text)

    if not phone and not email:
        await message.answer(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567) "
            "–∏–ª–∏ email (–Ω–∞–ø—Ä–∏–º–µ—Ä, user@example.com)."
        )
        return

    append_to_sheet(user_id, username, text)
    await state.clear()

    await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å:\n\n{text}\n\n"
        "–°–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

